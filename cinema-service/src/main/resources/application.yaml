spring:
  application:
    name: cinema-service
  profiles:
    active: dev

  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USER}
    password: ${DATABASE_PASSWORD}

  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        default_schema: cinema_service

  flyway:
    schemas: cinema_service
    locations: db/migration/base

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${JWK_SET_URI}

  servlet:
    multipart:
      enabled: true
      file-size-threshold: 10KB
      max-file-size: 20MB
      max-request-size: 50MB

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: 5672
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}

jwt:
  auth:
    converter:
      principle-attribute: ${PRINCIPLE_ATTRIBUTE}

media-service:
  url: ${MEDIA_SERVICE_URL}

payment-service:
  url: ${PAYMENT_SERVICE_URL}

#minutes
movies:
  delay-between-showtime: ${DELAY_BETWEEN_SHOWTIME}

#minutes
orders:
  reservation-time: ${RESERVATION_TIME}
  left-time-for-cancel: ${LEFT_TIME_FOR_CANCEL}

rabbitmq:
  order:
    reservation:
      exchange: order.reservation.exchange
      routing-key: order.reservation
      queue: order-reservation-queue
    payment:
      exchange: order.exchange
      routing-key: order.payment.confirm
      queue: order-payment-confirm-queue
  user:
    paid-tickets:
      exchange: user.email.exchange
      routing-key: user.email.ordered.tickets

server:
  port: 8092

springdoc:
  swagger-ui:
    title: CINEMA API

    description: "Cinema service is a microservice which a part of cinema system and responsible for:\n
                - Cinemas management \n
                - Cinema rooms management \n
                - Room seats management \n
                - Movies management \n
                - Genres management \n
                - Showtimes management\n
                - Orders management\n"